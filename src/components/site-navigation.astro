---
import { pageLinks, socialLinks } from "@/global-consts";
import OpenIcon from "@/assets/open.svg";
import CloseIcon from "@/assets/close.svg";
import Logo from "@/assets/ev_logo.svg";
import NavLink from "@/components/nav-link.astro";

const { currentPage } = Astro.props;
---

<nav
  class="fixed inset-x-0 bottom-0 z-20 border-t border-stone-700 bg-stone-800/60 pb-[env(safe-area-inset-bottom)] backdrop-blur-lg lg:inset-x-auto lg:top-0 lg:bottom-auto lg:flex lg:h-screen lg:w-12 lg:flex-col lg:border-r lg:pb-0">
  <div id="menu" class="hidden lg:flex lg:grow lg:flex-col lg:justify-between lg:pb-6">
    <div>
      <NavLink currentPage={currentPage} name={pageLinks[0].name} href={pageLinks[0].href} Icon={Logo} />
    </div>
    <div class="border-b border-stone-700 lg:border-0">
      {
        pageLinks.map(
          ({ name, href, Icon }) =>
            name !== "Home" && <NavLink currentPage={currentPage} name={name} href={href} Icon={Icon} />
        )
      }
    </div>
    <div class="grid grid-cols-2 lg:grid-cols-1">
      {
        socialLinks.map(({ name, href, external, Icon }) => (
          <NavLink currentPage={currentPage} name={name} href={href} isExternal={external} Icon={Icon} />
        ))
      }
    </div>
  </div>
  <button
    id="menu-toggle"
    class="group z-20 block w-full cursor-pointer py-3 hover:bg-stone-700/50 lg:hidden"
    aria-label="Toggle Menu">
    <OpenIcon id={"menu-open"} class={"size-6 text-stone-500 mx-auto group-hover:text-stone-300"} />
    <CloseIcon id={"menu-close"} class={"hidden text-stone-500 size-6 mx-auto group-hover:text-stone-300"} />
  </button>
</nav>
<!-- Handles the drop down menu visibility below sm breakpoint -->
<script is:inline>
  /*
  This line is so the script doesn't stop working after a link in the menu (or any link) is clicked due to Astro's view transitions implementation. See: https://docs.astro.build/en/guides/view-transitions/#script-re-execution
  */
  document.addEventListener("astro:page-load", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const menu = document.getElementById("menu");
    const menuOpen = document.getElementById("menu-open");
    const menuClose = document.getElementById("menu-close");

    // Toggle menu visibility
    menuToggle.addEventListener("click", (event) => {
      event.stopPropagation();
      menu.classList.toggle("hidden");
      menu.classList.toggle("block");
      menuOpen.classList.toggle("hidden");
      menuOpen.classList.toggle("block");
      menuClose.classList.toggle("hidden");
      menuClose.classList.toggle("block");
    });

    // Close menu when clicking outside
    document.addEventListener("click", (event) => {
      if (!menu.contains(event.target) && !menuToggle.contains(event.target)) {
        menu.classList.add("hidden");
        menu.classList.remove("block");
        menuOpen.classList.remove("hidden");
        menuOpen.classList.add("block");
        menuClose.classList.add("hidden");
        menuClose.classList.remove("block");
      }
    });
  });
</script>
